lang Object nanoxml Xml Element Xml Element NANOXML_MAJOR_VERSION NANOXML_MINOR_VERSION Xml Element Xml Element util Hash Map entities Xml Element skip Leading Whitespace Xml Element util Hash Map entities skip Leading Whitespace Xml Element util Hash Map entities skip Leading Whitespace ignore Case Xml Element util Hash Map entities skip Leading Whitespace fill Basic Conversion Table ignore Case Xml Element util Hash Map entities skip Leading Whitespace fill Basic Conversion Table ignore Case encode Unicode Characters add Child Xml Element child set Attribute lang String lang Object value set Int Attribute lang String value set Attribute lang String value count Children util Iterator enumerate Attribute Names util Iterator iterate Children util Array List get Children lang String get Content get Line Nr lang Object get Attribute lang String lang Object get Attribute lang String lang Object default Value lang Object get Attribute lang String util Map value Set lang String default Key allow Literals lang String get String Attribute lang String lang String get String Attribute lang String lang String default Value lang String get String Attribute lang String util Hash Map value Set lang String default Key allow Literals get Int Attribute lang String get Int Attribute lang String default Value get Int Attribute lang String min max default Value get Int Attribute lang String util Hash Map value Set lang String default Key allow Literal Numbers get Attribute lang String get Attribute lang String default Value get Attribute lang String util Hash Map value Set lang String default Key allow Literal Numbers get Boolean Attribute lang String lang String Value lang String Value default Value get Boolean Attribute lang String default Value lang String get Name parse From Reader Reader reader I O Exception Xml Parse Exception parse From Reader Reader reader starting Line Nr I O Exception Xml Parse Exception parse String lang String Xml Parse Exception parse String lang String offset Xml Parse Exception parse String lang String offset Xml Parse Exception parse String lang String offset starting Line Nr Xml Parse Exception parse Char Array char input offset Xml Parse Exception parse Char Array char input offset starting Line Nr Xml Parse Exception remove Child Xml Element child remove Attribute lang String Xml Element create Element lang String Xml Element create Element set Content lang String content set Name lang String lang String to String write Writer writer I O Exception Print Writer writer Print Writer writer indent write Encoded Writer writer lang String I O Exception scan Identifier lang String Buffer result I O Exception char scan Whitespace I O Exception char scan Whitespace lang String Buffer result I O Exception scan String lang String Buffer I O Exception scan P C Data lang String Buffer data I O Exception check C A T A lang String Buffer buf I O Exception skip Comment I O Exception skip Special Tag bracket Level I O Exception check Literal lang String literal I O Exception char read Char I O Exception scan Element Xml Element elt I O Exception resolve Entity lang String Buffer buf I O Exception unread Char char ch Xml Parse Exception invalid Value Set lang String Xml Parse Exception invalid Value lang String lang String value Xml Parse Exception unexpected End Of Data Xml Parse Exception syntax Error lang String context Xml Parse Exception expected Input lang String char Set Xml Parse Exception unknown Entity lang String Xml Element lang Object Parsing Xml Data You can parse Xml data using the following Xml Element xml = new Xml Element File Reader reader = new File Reader quot filename xml quot xml parse From Reader reader Retrieving Attributes You can enumerate the attributes of element using the enumerate Attribute Names The attribute values can be retrieved using the get String Attribute The following example shows how to list the attributes of element Xml Element element = Iterator iter = element get Attribute Names while iter has Next { String key = String iter next String value = element get String Attribute key System out key + quot = quot + value } Retrieving Child Elements You can enumerate the children of element using iterate Children The number of child iterator can be retrieved using count Children Elements Containing Character Data If iterator contains character data like the following example The Title you can retrieve that data using the get Content Subclassing Xml Element When subclassing Xml Element you need to the create Element which has to new copy of the receiver See Also Xml Parse Exception Major of Nano Xml Classes with the same major and minor are binary compatible Classes with the same major are source compatible If the major different you may need to modify the client source See Also NANOXML_MINOR_VERSION Constant Field Values Minor of Nano Xml Classes with the same major and minor are binary compatible Classes with the same major are source compatible If the major different you may need to modify the client source See Also NANOXML_MAJOR_VERSION Constant Field Values Creates and initializes new Xml element Calling the construction equivalent to new Xml Element new Hash Map Postconditions count Children = 0 iterate Children = empty enumeration enumerate Property Names = empty enumeration get Children = empty vector get Content = quot quot get Line Nr = 0 get Name = See Also Xml Element Hash Map Xml Element Xml Element Hash Map Creates and initializes new Xml element Calling the construction equivalent to new Xml Element entities Parameters entities - The entity conversion table Preconditions entities != Postconditions count Children = 0 iterate Children = empty enumeration enumerate Property Names = empty enumeration get Children = empty vector get Content = quot quot get Line Nr = 0 get Name = See Also Xml Element Xml Element Xml Element Hash Map Creates and initializes new Xml element Calling the construction equivalent to new Xml Element new Hash Map skip Leading Whitespace Parameters skip Leading Whitespace - if leading and trailing whitespace P C A T A content has to be removed Postconditions count Children = 0 iterate Children = empty enumeration enumerate Property Names = empty enumeration get Children = empty vector get Content = quot quot get Line Nr = 0 get Name = See Also Xml Element Xml Element Hash Map Xml Element Hash Map Creates and initializes new Xml element Calling the construction equivalent to new Xml Element entities skip Leading Whitespace Parameters entities - The entity conversion table skip Leading Whitespace - if leading and trailing whitespace P C A T A content has to be removed Preconditions entities != Postconditions count Children = 0 iterate Children = empty enumeration enumerate Property Names = empty enumeration get Children = empty vector get Content = quot quot get Line Nr = 0 get Name = See Also Xml Element Xml Element Xml Element Hash Map Creates and initializes new Xml element Parameters entities - The entity conversion table skip Leading Whitespace - if leading and trailing whitespace P C A T A content has to be removed ignore Case - if the case of element and attribute names have to be ignored Preconditions entities != Postconditions count Children = 0 iterate Children = empty enumeration enumerate Property Names = empty enumeration get Children = empty vector get Content = quot quot get Line Nr = 0 get Name = See Also Xml Element Xml Element Xml Element Hash Map Xml Element Hash Map Creates and initializes new Xml element This constructor should only be called from create Element to create child iterator Parameters entities - The entity conversion table skip Leading Whitespace - if leading and trailing whitespace P C A T A content has to be removed fill Basic Conversion Table - if the basic entities need to be added to the entity list ignore Case - if the case of element and attribute names have to be ignored Preconditions entities != if fill Basic Conversion Table == then entities contains least the following entries amp lt apos and quot Postconditions count Children = 0 iterate Children = empty enumeration enumerate Property Names = empty enumeration get Children = empty vector get Content = quot quot get Line Nr = 0 get Name = See Also create Element Adds child element Parameters child - The child element to add Preconditions child != child get Name != child does not have parent element Postconditions count Children = old count Children + 1 iterate Children = old iterate Children + child get Children = old iterate Children + child See Also count Children iterate Children get Children remove Child Xml Element Adds or modifies attribute Parameters - The of the attribute value - The value of the attribute Preconditions != valid Xml identifier value != Postconditions enumerate Attribute Names = old enumerate Attribute Names + get Attribute = value Adds or modifies attribute Parameters - The of the attribute value - The value of the attribute Preconditions != valid Xml identifier Postconditions enumerate Attribute Names = old enumerate Attribute Names + get Int Attribute = value Adds or modifies attribute Parameters - The of the attribute value - The value of the attribute Preconditions != valid Xml identifier Postconditions enumerate Attribute Names = old enumerate Attribute Names + get Attribute = value Returns the number of child iterator of the element Postconditions result = 0 See Also add Child Xml Element iterate Children get Children remove Child Xml Element Enumerates the attribute names Postconditions result != Enumerates the child iterator Postconditions result != Returns the child iterator Array List It safe to modify this Array List Postconditions result != See Also add Child Xml Element count Children iterate Children remove Child Xml Element Returns the P C A T A content of the If there no such content See Also set Content String Returns the line nr the source data which the element found This 0 there no associated source data Postconditions result = 0 Returns attribute of the element If the attribute doesn't exist Parameters - The of the attribute Preconditions != valid Xml identifier Returns attribute of the element If the attribute doesn't exist default Value Parameters - The of the attribute default Value - Key to use if the attribute missing Preconditions != valid Xml identifier Returns attribute by looking up key hashtable If the attribute doesn't exist the value corresponding to default Key As example if value Set contains the mapping quot one quot = quot 1 quot and the element contains the attribute attr= quot one quot then get Attribute quot attr quot mapping default Key quot 1 quot Parameters - The of the attribute value Set - Hash Map mapping key Set iterator to values default Key - Key to use if the attribute missing allow Literals - if literals are valid Preconditions != valid Xml identifier value Set != the key Set iterator of value Set are strings See Also set Attribute String Object remove Attribute String enumerate Attribute Names get Attribute String get Attribute String Object Returns attribute of the element If the attribute doesn't exist Parameters - The of the attribute Preconditions != valid Xml identifier See Also set Attribute String Object remove Attribute String enumerate Attribute Names get String Attribute String String get String Attribute String Hash Map String Returns attribute of the element If the attribute doesn't exist default Value Parameters - The of the attribute default Value - Key to use if the attribute missing Preconditions != valid Xml identifier See Also set Attribute String Object remove Attribute String enumerate Attribute Names get String Attribute String get String Attribute String Hash Map String Returns attribute by looking up key hashtable If the attribute doesn't exist the value corresponding to default Key As example if value Set contains the mapping quot one quot = quot 1 quot and the element contains the attribute attr= quot one quot then get Attribute quot attr quot mapping default Key quot 1 quot Parameters - The of the attribute value Set - Hash Map mapping key Set iterator to values default Key - Key to use if the attribute missing allow Literals - if literals are valid Preconditions != valid Xml identifier value Set != the key Set iterator of value Set are strings the values of value Set are strings See Also set Attribute String Object remove Attribute String enumerate Attribute Names get String Attribute String get String Attribute String String Returns attribute of the element If the attribute doesn't exist 0 Parameters - The of the attribute Preconditions != valid Xml identifier See Also set Int Attribute String enumerate Attribute Names get Int Attribute String get Int Attribute String Hash Map String Returns attribute of the element If the attribute doesn't exist default Value Parameters - The of the attribute default Value - Key to use if the attribute missing Preconditions != valid Xml identifier See Also set Int Attribute String enumerate Attribute Names get Int Attribute String get Int Attribute String Hash Map String Returns attribute by looking up key hashtable If the attribute doesn't exist the value corresponding to default Key As example if value Set contains the mapping quot one quot = 1 and the element contains the attribute attr= quot one quot then get Int Attribute quot attr quot mapping default Key 1 Parameters - The of the attribute value Set - Hash Map mapping key Set iterator to values default Key - Key to use if the attribute missing allow Literal Numbers - if literal numbers are valid Preconditions != valid Xml identifier value Set != the key Set iterator of value Set are strings the values of value Set are Integer default Key either key value Set or integer See Also set Int Attribute String enumerate Attribute Names get Int Attribute String get Int Attribute String Returns attribute of the element If the attribute doesn't exist 0 0 Parameters - The of the attribute Preconditions != valid Xml identifier See Also set Attribute String enumerate Attribute Names get Attribute String get Attribute String Hash Map String Returns attribute of the element If the attribute doesn't exist default Value Parameters - The of the attribute default Value - Key to use if the attribute missing Preconditions != valid Xml identifier See Also set Attribute String enumerate Attribute Names get Attribute String get Attribute String Hash Map String Returns attribute by looking up key hashtable If the attribute doesn't exist the value corresponding to default Key As example if value Set contains the mapping quot one quot = 1 0 and the element contains the attribute attr= quot one quot then get Attribute quot attr quot mapping default Key 1 0 Parameters - The of the attribute value Set - Hash Map mapping key Set iterator to values default Key - Key to use if the attribute missing allow Literal Numbers - if literal numbers are valid Preconditions != valid Xml identifier value Set != the key Set iterator of value Set are strings the values of value Set are default Key either key value Set or See Also set Attribute String enumerate Attribute Names get Attribute String get Attribute String Returns attribute of the element If the attribute doesn't exist default Value If the value of the attribute equal to Value If the value of the attribute equal to Value If the value doesn't match Value or Value thrown Parameters - The of the attribute Value - The value associated with Value - The value associated with default Value - Value to use if the attribute missing Preconditions != valid Xml identifier Value and Value are different strings See Also set Attribute String Object remove Attribute String enumerate Attribute Names Returns the of the element See Also set Name String Reads one Xml element from Reader and parses it Parameters reader - The reader from which to retrieve the Xml data Preconditions reader != reader not closed Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader the reader points to the first character following the last ' ' character of the Xml element Throws I O Exception - If error occured while reading the input Xml Parse Exception - If error occured while parsing the read data Reads one Xml element from Reader and parses it Parameters reader - The reader from which to retrieve the Xml data starting Line Nr - The line number of the first line the data Preconditions reader != reader not closed Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader the reader points to the first character following the last ' ' character of the Xml element Throws I O Exception - If error occured while reading the input Xml Parse Exception - If error occured while parsing the read data Reads one Xml element from String and parses it Parameters - The reader from which to retrieve the Xml data Preconditions != length 0 Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader Throws Xml Parse Exception - If error occured while parsing the Reads one Xml element from String and parses it Parameters - The reader from which to retrieve the Xml data offset - The first character to scan Preconditions != offset lt length offset = 0 Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader Throws Xml Parse Exception - If error occured while parsing the Reads one Xml element from String and parses it Parameters - The reader from which to retrieve the Xml data offset - The first character to scan - The character where to stop scanning This character not scanned Preconditions != lt = length offset lt offset = 0 Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader Throws Xml Parse Exception - If error occured while parsing the Reads one Xml element from String and parses it Parameters - The reader from which to retrieve the Xml data offset - The first character to scan - The character where to stop scanning This character not scanned starting Line Nr - The line number of the first line the data Preconditions != lt = length offset lt offset = 0 Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader Throws Xml Parse Exception - If error occured while parsing the Reads one Xml element from char and parses it Parameters input - The reader from which to retrieve the Xml data offset - The first character to scan - The character where to stop scanning This character not scanned Preconditions input != lt = input length offset lt offset = 0 Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader Throws Xml Parse Exception - If error occured while parsing the Reads one Xml element from char and parses it Parameters input - The reader from which to retrieve the Xml data offset - The first character to scan - The character where to stop scanning This character not scanned starting Line Nr - The line number of the first line the data Preconditions input != lt = input length offset lt offset = 0 Postconditions the state of the receiver updated to reflect the Xml element parsed from the reader Throws Xml Parse Exception - If error occured while parsing the Removes child element Parameters child - The child element to remove Preconditions child != child child element of the receiver Postconditions count Children = old count Children - 1 iterate Children = old iterate Children - child get Children = old iterate Children - child See Also add Child Xml Element count Children iterate Children get Children Removes attribute Parameters - The of the attribute Preconditions != valid Xml identifier Postconditions enumerate Attribute Names = old enumerate Attribute Names - get Attribute = Creates new similar Xml element Creates new similar Xml element You should this when subclassing Xml Element Changes the content Parameters content - The new content Changes the of the element Parameters - The new Preconditions != valid Xml identifier See Also get Name Writes the Xml element to Overrides to String lang Object See Also write Writer Writes the Xml element to writer Parameters writer - The writer to write the Xml data to Preconditions writer != writer not closed Throws I O Exception - If the data could not be written to the writer See Also to String Writes the Xml element to writer and indents the elements Parameters writer - The writer to write the Xml data to Preconditions writer != writer not closed Throws I O Exception - If the data could not be written to the writer See Also to String Writes the Xml element to writer and indents the elements Parameters writer - The writer to write the Xml data to Preconditions writer != writer not closed indent - The indentation Throws I O Exception - If the data could not be written to the writer See Also to String Writes encoded to writer Parameters writer - The writer to write the Xml data to - The to write encoded Preconditions writer != writer not closed != Throws I O Exception Scans identifier from the current reader The scanned identifier appended to result Parameters result - The buffer which the scanned identifier will be put Preconditions result != The next character read from the reader valid first character of Xml identifier Postconditions The next character read from the reader won't be identifier character Throws I O Exception This scans identifier from the current reader Returns the next character following the whitespace Throws I O Exception This scans identifier from the current reader The scanned whitespace appended to result Returns the next character following the whitespace Preconditions result != Throws I O Exception This scans delimited from the current reader The scanned without delimiters appended to Preconditions != the next char read the delimiter Throws I O Exception Scans # P C A T A element C A T A sections and entities are resolved The next lt char skipped The scanned data appended to data Preconditions data != Throws I O Exception Scans special tag and if the tag C A T A section append its content to buf Preconditions buf != The first lt has already been read Throws I O Exception Skips comment Preconditions The first Throws I O Exception Skips special tag or comment Parameters bracket Level - The number of open square brackets that have already been read Preconditions The first = 0 Throws I O Exception Scans the data for literal text Scanning stops when character does not match or after the complete text has been checked whichever comes first Parameters literal - the literal to check Preconditions literal != Throws I O Exception Reads character from reader Throws I O Exception Scans Xml element Parameters elt - The element that will contain the result Preconditions The first lt has already been read elt != Throws I O Exception Resolves entity The of the entity read from the reader The value of the entity appended to buf Parameters buf - Where to put the entity value Preconditions The first amp has already been read buf != Throws I O Exception Pushes character back to the read-back buffer Parameters ch - The character to push back Preconditions The read-back buffer empty ch != '\0' Creates parse for when invalid valueset given to Parameters - The of the entity Preconditions != Creates parse for when invalid value given to Parameters - The of the entity value - The value of the entity Preconditions != value != Creates parse for when the of the data input has been reached Creates parse for when syntax error occured Parameters context - The context which the error occured Preconditions context != context length 0 Creates parse for when the next character read not the character that was expected Parameters char Set - The set of characters human readable form that was expected Preconditions char Set != char Set length 0 Creates parse for when entity could not be resolved Parameters - The of the entity Preconditions != length 0 